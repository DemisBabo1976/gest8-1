{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api/ordini';\n\n/**\r\n * Ottiene tutti gli ordini con opzioni di filtro\r\n * @param {Object} filtri - Opzioni di filtro (stato, tipo, data, cliente)\r\n */\nexport const getOrdini = async (filtri = {}) => {\n  try {\n    const {\n      stato,\n      tipo,\n      data,\n      cliente\n    } = filtri;\n    let url = API_URL;\n\n    // Costruisci i parametri di query\n    const params = new URLSearchParams();\n    if (stato) params.append('stato', stato);\n    if (tipo) params.append('tipo', tipo);\n    if (data) params.append('data', data);\n    if (cliente) params.append('cliente', cliente);\n\n    // Aggiungi i parametri di query all'URL se presenti\n    if (params.toString()) {\n      url = `${url}?${params.toString()}`;\n    }\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error('Errore nel recupero degli ordini:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Ottiene un singolo ordine per ID\r\n * @param {string} id - ID dell'ordine\r\n */\nexport const getOrdine = async id => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Errore nel recupero dell'ordine ${id}:`, error);\n    throw error;\n  }\n};\n\n/**\r\n * Crea un nuovo ordine\r\n * @param {Object} ordineData - Dati del nuovo ordine\r\n */\nexport const createOrdine = async ordineData => {\n  try {\n    const response = await axios.post(API_URL, ordineData);\n    return response.data;\n  } catch (error) {\n    console.error('Errore nella creazione dell\\'ordine:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Aggiorna un ordine esistente\r\n * @param {string} id - ID dell'ordine\r\n * @param {Object} ordineData - Dati aggiornati dell'ordine\r\n */\nexport const updateOrdine = async (id, ordineData) => {\n  try {\n    const response = await axios.put(`${API_URL}/${id}`, ordineData);\n    return response.data;\n  } catch (error) {\n    console.error(`Errore nell'aggiornamento dell'ordine ${id}:`, error);\n    throw error;\n  }\n};\n\n/**\r\n * Aggiorna lo stato di un ordine\r\n * @param {string} id - ID dell'ordine\r\n * @param {string} stato - Nuovo stato dell'ordine\r\n */\nexport const updateStatoOrdine = async (id, stato) => {\n  try {\n    const response = await axios.put(`${API_URL}/${id}/stato`, {\n      stato\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Errore nell'aggiornamento dello stato dell'ordine ${id}:`, error);\n    throw error;\n  }\n};\n\n/**\r\n * Elimina un ordine\r\n * @param {string} id - ID dell'ordine da eliminare\r\n */\nexport const deleteOrdine = async id => {\n  try {\n    const response = await axios.delete(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Errore nell'eliminazione dell'ordine ${id}:`, error);\n    throw error;\n  }\n};\n\n/**\r\n * Ottiene le statistiche degli ordini\r\n * @param {Object} filtri - Opzioni di filtro (dataInizio, dataFine)\r\n */\nexport const getStatisticheOrdini = async (filtri = {}) => {\n  try {\n    const {\n      dataInizio,\n      dataFine\n    } = filtri;\n    let url = `${API_URL}/statistiche`;\n\n    // Costruisci i parametri di query\n    const params = new URLSearchParams();\n    if (dataInizio) params.append('dataInizio', dataInizio);\n    if (dataFine) params.append('dataFine', dataFine);\n\n    // Aggiungi i parametri di query all'URL se presenti\n    if (params.toString()) {\n      url = `${url}?${params.toString()}`;\n    }\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error('Errore nel recupero delle statistiche degli ordini:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","getOrdini","filtri","stato","tipo","data","cliente","url","params","URLSearchParams","append","toString","response","get","error","console","getOrdine","id","createOrdine","ordineData","post","updateOrdine","put","updateStatoOrdine","deleteOrdine","delete","getStatisticheOrdini","dataInizio","dataFine"],"sources":["C:/Users/demis/Desktop/gest8/client/src/services/ordiniService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api/ordini';\r\n\r\n/**\r\n * Ottiene tutti gli ordini con opzioni di filtro\r\n * @param {Object} filtri - Opzioni di filtro (stato, tipo, data, cliente)\r\n */\r\nexport const getOrdini = async (filtri = {}) => {\r\n  try {\r\n    const { stato, tipo, data, cliente } = filtri;\r\n    let url = API_URL;\r\n    \r\n    // Costruisci i parametri di query\r\n    const params = new URLSearchParams();\r\n    if (stato) params.append('stato', stato);\r\n    if (tipo) params.append('tipo', tipo);\r\n    if (data) params.append('data', data);\r\n    if (cliente) params.append('cliente', cliente);\r\n    \r\n    // Aggiungi i parametri di query all'URL se presenti\r\n    if (params.toString()) {\r\n      url = `${url}?${params.toString()}`;\r\n    }\r\n    \r\n    const response = await axios.get(url);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Errore nel recupero degli ordini:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Ottiene un singolo ordine per ID\r\n * @param {string} id - ID dell'ordine\r\n */\r\nexport const getOrdine = async (id) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Errore nel recupero dell'ordine ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Crea un nuovo ordine\r\n * @param {Object} ordineData - Dati del nuovo ordine\r\n */\r\nexport const createOrdine = async (ordineData) => {\r\n  try {\r\n    const response = await axios.post(API_URL, ordineData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Errore nella creazione dell\\'ordine:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Aggiorna un ordine esistente\r\n * @param {string} id - ID dell'ordine\r\n * @param {Object} ordineData - Dati aggiornati dell'ordine\r\n */\r\nexport const updateOrdine = async (id, ordineData) => {\r\n  try {\r\n    const response = await axios.put(`${API_URL}/${id}`, ordineData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Errore nell'aggiornamento dell'ordine ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Aggiorna lo stato di un ordine\r\n * @param {string} id - ID dell'ordine\r\n * @param {string} stato - Nuovo stato dell'ordine\r\n */\r\nexport const updateStatoOrdine = async (id, stato) => {\r\n  try {\r\n    const response = await axios.put(`${API_URL}/${id}/stato`, { stato });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Errore nell'aggiornamento dello stato dell'ordine ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Elimina un ordine\r\n * @param {string} id - ID dell'ordine da eliminare\r\n */\r\nexport const deleteOrdine = async (id) => {\r\n  try {\r\n    const response = await axios.delete(`${API_URL}/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Errore nell'eliminazione dell'ordine ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Ottiene le statistiche degli ordini\r\n * @param {Object} filtri - Opzioni di filtro (dataInizio, dataFine)\r\n */\r\nexport const getStatisticheOrdini = async (filtri = {}) => {\r\n  try {\r\n    const { dataInizio, dataFine } = filtri;\r\n    let url = `${API_URL}/statistiche`;\r\n    \r\n    // Costruisci i parametri di query\r\n    const params = new URLSearchParams();\r\n    if (dataInizio) params.append('dataInizio', dataInizio);\r\n    if (dataFine) params.append('dataFine', dataFine);\r\n    \r\n    // Aggiungi i parametri di query all'URL se presenti\r\n    if (params.toString()) {\r\n      url = `${url}?${params.toString()}`;\r\n    }\r\n    \r\n    const response = await axios.get(url);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Errore nel recupero delle statistiche degli ordini:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}