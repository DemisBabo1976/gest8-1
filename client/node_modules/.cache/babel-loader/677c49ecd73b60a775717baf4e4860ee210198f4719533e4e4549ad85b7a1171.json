{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n// Ottiene tutti gli ordini\nexport const getOrdini = async (filtri = {}) => {\n  try {\n    const response = await axios.get(`${API_URL}/ordini`, {\n      params: filtri\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Errore nel recupero degli ordini:', error);\n    throw error;\n  }\n};\n\n// Ottiene un ordine specifico\nexport const getOrdine = async id => {\n  try {\n    const response = await axios.get(`${API_URL}/ordini/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Errore nel recupero dell'ordine con ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Crea un nuovo ordine\nexport const createOrdine = async (ordine, force = false) => {\n  try {\n    const url = force ? `${API_URL}/ordini?force=true` : `${API_URL}/ordini`;\n    const response = await axios.post(url, ordine);\n    return response.data;\n  } catch (error) {\n    console.error('Errore nella creazione dell\\'ordine:', error);\n    throw error;\n  }\n};\n\n// Aggiorna un ordine esistente\nexport const updateOrdine = async (id, ordine, force = false) => {\n  try {\n    const url = force ? `${API_URL}/ordini/${id}?force=true` : `${API_URL}/ordini/${id}`;\n    const response = await axios.put(url, ordine);\n    return response.data;\n  } catch (error) {\n    console.error(`Errore nell'aggiornamento dell'ordine con ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Elimina un ordine\nexport const deleteOrdine = async id => {\n  try {\n    const response = await axios.delete(`${API_URL}/ordini/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Errore nell'eliminazione dell'ordine con ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Aggiorna solo lo stato di un ordine\nexport const updateStatoOrdine = async (id, nuovoStato) => {\n  try {\n    const response = await axios.patch(`${API_URL}/ordini/${id}/stato`, {\n      stato: nuovoStato\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Errore nell'aggiornamento dello stato dell'ordine con ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Ottiene statistiche sugli ordini\nexport const getStatisticheOrdini = async (filtri = {}) => {\n  try {\n    const response = await axios.get(`${API_URL}/ordini/statistiche/riassunto`, {\n      params: filtri\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Errore nel recupero delle statistiche degli ordini:', error);\n    throw error;\n  }\n};\n\n// Ottiene gli slot orari disponibili per una data\nexport const getSlotOrari = async data => {\n  try {\n    const response = await axios.get(`${API_URL}/ordini/slots`, {\n      params: {\n        data\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Errore nel recupero degli slot orari:', error);\n    throw error;\n  }\n};\n\n// Ottiene le configurazioni orari\nexport const getConfigurazioniOrari = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/ordini/configurazione`);\n    return response.data;\n  } catch (error) {\n    console.error('Errore nel recupero delle configurazioni orari:', error);\n    throw error;\n  }\n};\n\n// Ottiene configurazione per un giorno specifico\nexport const getConfigurazioneGiorno = async giorno => {\n  try {\n    const response = await axios.get(`${API_URL}/ordini/configurazione/${giorno}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Errore nel recupero della configurazione per il giorno ${giorno}:`, error);\n    throw error;\n  }\n};\n\n// Aggiorna configurazione per un giorno\nexport const updateConfigurazioneGiorno = async (giorno, configurazione) => {\n  try {\n    const response = await axios.put(`${API_URL}/ordini/configurazione/${giorno}`, configurazione);\n    return response.data;\n  } catch (error) {\n    console.error(`Errore nell'aggiornamento della configurazione per il giorno ${giorno}:`, error);\n    throw error;\n  }\n};\n\n// Copia configurazione a tutti i giorni\nexport const copiaConfigurazioneATutti = async giorno => {\n  try {\n    const response = await axios.post(`${API_URL}/ordini/configurazione/${giorno}/copia-a-tutti`);\n    return response.data;\n  } catch (error) {\n    console.error('Errore nella copia della configurazione a tutti i giorni:', error);\n    throw error;\n  }\n};\nexport default {\n  getOrdini,\n  getOrdine,\n  createOrdine,\n  updateOrdine,\n  deleteOrdine,\n  updateStatoOrdine,\n  getStatisticheOrdini,\n  getSlotOrari,\n  getConfigurazioniOrari,\n  getConfigurazioneGiorno,\n  updateConfigurazioneGiorno,\n  copiaConfigurazioneATutti\n};","map":{"version":3,"names":["axios","API_URL","getOrdini","filtri","response","get","params","data","error","console","getOrdine","id","createOrdine","ordine","force","url","post","updateOrdine","put","deleteOrdine","delete","updateStatoOrdine","nuovoStato","patch","stato","getStatisticheOrdini","getSlotOrari","getConfigurazioniOrari","getConfigurazioneGiorno","giorno","updateConfigurazioneGiorno","configurazione","copiaConfigurazioneATutti"],"sources":["C:/Users/demis/Desktop/gest8-1/client/src/services/ordiniService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Ottiene tutti gli ordini\r\nexport const getOrdini = async (filtri = {}) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/ordini`, { params: filtri });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Errore nel recupero degli ordini:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Ottiene un ordine specifico\r\nexport const getOrdine = async (id) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/ordini/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Errore nel recupero dell'ordine con ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Crea un nuovo ordine\r\nexport const createOrdine = async (ordine, force = false) => {\r\n  try {\r\n    const url = force ? `${API_URL}/ordini?force=true` : `${API_URL}/ordini`;\r\n    const response = await axios.post(url, ordine);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Errore nella creazione dell\\'ordine:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Aggiorna un ordine esistente\r\nexport const updateOrdine = async (id, ordine, force = false) => {\r\n  try {\r\n    const url = force ? `${API_URL}/ordini/${id}?force=true` : `${API_URL}/ordini/${id}`;\r\n    const response = await axios.put(url, ordine);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Errore nell'aggiornamento dell'ordine con ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Elimina un ordine\r\nexport const deleteOrdine = async (id) => {\r\n  try {\r\n    const response = await axios.delete(`${API_URL}/ordini/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Errore nell'eliminazione dell'ordine con ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Aggiorna solo lo stato di un ordine\r\nexport const updateStatoOrdine = async (id, nuovoStato) => {\r\n  try {\r\n    const response = await axios.patch(`${API_URL}/ordini/${id}/stato`, { stato: nuovoStato });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Errore nell'aggiornamento dello stato dell'ordine con ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Ottiene statistiche sugli ordini\r\nexport const getStatisticheOrdini = async (filtri = {}) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/ordini/statistiche/riassunto`, { params: filtri });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Errore nel recupero delle statistiche degli ordini:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Ottiene gli slot orari disponibili per una data\r\nexport const getSlotOrari = async (data) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/ordini/slots`, { params: { data } });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Errore nel recupero degli slot orari:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Ottiene le configurazioni orari\r\nexport const getConfigurazioniOrari = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/ordini/configurazione`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Errore nel recupero delle configurazioni orari:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Ottiene configurazione per un giorno specifico\r\nexport const getConfigurazioneGiorno = async (giorno) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/ordini/configurazione/${giorno}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Errore nel recupero della configurazione per il giorno ${giorno}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Aggiorna configurazione per un giorno\r\nexport const updateConfigurazioneGiorno = async (giorno, configurazione) => {\r\n  try {\r\n    const response = await axios.put(`${API_URL}/ordini/configurazione/${giorno}`, configurazione);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Errore nell'aggiornamento della configurazione per il giorno ${giorno}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Copia configurazione a tutti i giorni\r\nexport const copiaConfigurazioneATutti = async (giorno) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/ordini/configurazione/${giorno}/copia-a-tutti`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Errore nella copia della configurazione a tutti i giorni:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default {\r\n  getOrdini,\r\n  getOrdine,\r\n  createOrdine,\r\n  updateOrdine,\r\n  deleteOrdine,\r\n  updateStatoOrdine,\r\n  getStatisticheOrdini,\r\n  getSlotOrari,\r\n  getConfigurazioniOrari,\r\n  getConfigurazioneGiorno,\r\n  updateConfigurazioneGiorno,\r\n  copiaConfigurazioneATutti\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}