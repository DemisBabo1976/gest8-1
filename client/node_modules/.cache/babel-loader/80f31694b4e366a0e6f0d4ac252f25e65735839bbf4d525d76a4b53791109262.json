{"ast":null,"code":"// services/clientiService.js\nimport axios from 'axios';\n\n// Base URL per le chiamate API\nconst API_URL = '/api/clienti';\n\n// Ottieni tutti i clienti\nexport const getClienti = async () => {\n  try {\n    console.log('Tento di recuperare i clienti dall\\'endpoint:', API_URL);\n    const response = await axios.get(API_URL, {\n      // Aggiungi opzioni per gestire eventuali problemi di CORS o configurazione\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('Risposta dal server:', response.data);\n\n    // Gestisci diversi formati di risposta\n    return response.data.data || response.data;\n  } catch (error) {\n    console.error('Errore dettagliato nel recupero dei clienti:', error);\n\n    // Gestisci differenti tipi di errori\n    if (error.response) {\n      // Il server ha risposto con un codice di stato fuori dal range 2xx\n      console.error('Dati dell\\'errore:', error.response.data);\n      console.error('Stato dell\\'errore:', error.response.status);\n    } else if (error.request) {\n      // La richiesta è stata fatta ma non è stata ricevuta alcuna risposta\n      console.error('Nessuna risposta ricevuta:', error.request);\n    } else {\n      // Qualcosa è andato storto durante la configurazione della richiesta\n      console.error('Errore di configurazione:', error.message);\n    }\n    throw error;\n  }\n};\n\n// Cerca clienti per query\nexport const cercaClienti = async query => {\n  try {\n    const response = await axios.get(`${API_URL}/search`, {\n      params: {\n        q: query\n      }\n    });\n    return response.data.data || response.data;\n  } catch (error) {\n    console.error('Errore nella ricerca dei clienti:', error);\n    throw error;\n  }\n};\n\n// Crea un nuovo cliente\nexport const createCliente = async cliente => {\n  try {\n    const response = await axios.post(API_URL, cliente);\n    return response.data.data || response.data;\n  } catch (error) {\n    console.error('Errore nella creazione del cliente:', error);\n    throw error;\n  }\n};\n\n// Altre funzioni come updateCliente, deleteCliente rimangono invariate\n\n// Aggiorna un cliente\nexport const updateCliente = async (id, cliente) => {\n  try {\n    const response = await axios.put(`${API_URL}/${id}`, cliente);\n    return response.data;\n  } catch (error) {\n    console.error(`Errore nell'aggiornamento del cliente ${id}:`, error);\n    throw error;\n  }\n};\n\n// Elimina un cliente\nexport const deleteCliente = async id => {\n  try {\n    const response = await axios.delete(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Errore nell'eliminazione del cliente ${id}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","getClienti","console","log","response","get","headers","data","error","status","request","message","cercaClienti","query","params","q","createCliente","cliente","post","updateCliente","id","put","deleteCliente","delete"],"sources":["C:/Users/demis/Desktop/gest8/client/src/services/clientiService.js"],"sourcesContent":["// services/clientiService.js\r\nimport axios from 'axios';\r\n\r\n// Base URL per le chiamate API\r\nconst API_URL = '/api/clienti';\r\n\r\n// Ottieni tutti i clienti\r\nexport const getClienti = async () => {\r\n  try {\r\n    console.log('Tento di recuperare i clienti dall\\'endpoint:', API_URL);\r\n    \r\n    const response = await axios.get(API_URL, {\r\n      // Aggiungi opzioni per gestire eventuali problemi di CORS o configurazione\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    \r\n    console.log('Risposta dal server:', response.data);\r\n    \r\n    // Gestisci diversi formati di risposta\r\n    return response.data.data || response.data;\r\n  } catch (error) {\r\n    console.error('Errore dettagliato nel recupero dei clienti:', error);\r\n    \r\n    // Gestisci differenti tipi di errori\r\n    if (error.response) {\r\n      // Il server ha risposto con un codice di stato fuori dal range 2xx\r\n      console.error('Dati dell\\'errore:', error.response.data);\r\n      console.error('Stato dell\\'errore:', error.response.status);\r\n    } else if (error.request) {\r\n      // La richiesta è stata fatta ma non è stata ricevuta alcuna risposta\r\n      console.error('Nessuna risposta ricevuta:', error.request);\r\n    } else {\r\n      // Qualcosa è andato storto durante la configurazione della richiesta\r\n      console.error('Errore di configurazione:', error.message);\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// Cerca clienti per query\r\nexport const cercaClienti = async (query) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/search`, {\r\n      params: { q: query }\r\n    });\r\n    return response.data.data || response.data;\r\n  } catch (error) {\r\n    console.error('Errore nella ricerca dei clienti:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Crea un nuovo cliente\r\nexport const createCliente = async (cliente) => {\r\n  try {\r\n    const response = await axios.post(API_URL, cliente);\r\n    return response.data.data || response.data;\r\n  } catch (error) {\r\n    console.error('Errore nella creazione del cliente:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Altre funzioni come updateCliente, deleteCliente rimangono invariate\r\n\r\n// Aggiorna un cliente\r\nexport const updateCliente = async (id, cliente) => {\r\n  try {\r\n    const response = await axios.put(`${API_URL}/${id}`, cliente);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Errore nell'aggiornamento del cliente ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Elimina un cliente\r\nexport const deleteCliente = async (id) => {\r\n  try {\r\n    const response = await axios.delete(`${API_URL}/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Errore nell'eliminazione del cliente ${id}:`, error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}