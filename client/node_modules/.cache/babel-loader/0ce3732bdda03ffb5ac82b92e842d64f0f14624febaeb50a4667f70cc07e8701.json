{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api/ordini';\n\n/**\r\n * Recupera tutti gli ordini con filtri opzionali\r\n * @param {Object} filtri - Filtri opzionali (stato, tipoOrdine, data, cliente)\r\n * @returns {Promise} Promise con i dati degli ordini\r\n */\nexport const getOrdini = async (filtri = {}) => {\n  try {\n    const params = new URLSearchParams();\n\n    // Aggiungi i filtri ai parametri\n    Object.entries(filtri).forEach(([key, value]) => {\n      if (value) params.append(key, value);\n    });\n    const url = `${API_URL}${params.toString() ? '?' + params.toString() : ''}`;\n    const response = await axios.get(url);\n    return response.data.data;\n  } catch (error) {\n    console.error('Errore nel recupero degli ordini:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Recupera un ordine specifico per ID\r\n * @param {string} id - ID dell'ordine\r\n * @returns {Promise} Promise con i dati dell'ordine\r\n */\nexport const getOrdine = async id => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}`);\n    return response.data.data;\n  } catch (error) {\n    console.error(`Errore nel recupero dell'ordine ${id}:`, error);\n    throw error;\n  }\n};\n\n/**\r\n * Crea un nuovo ordine\r\n * @param {Object} ordine - Dati del nuovo ordine\r\n * @returns {Promise} Promise con i dati del nuovo ordine creato\r\n */\nexport const createOrdine = async ordine => {\n  try {\n    const response = await axios.post(API_URL, ordine);\n    return response.data;\n  } catch (error) {\n    console.error('Errore nella creazione dell\\'ordine:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Aggiorna un ordine esistente\r\n * @param {string} id - ID dell'ordine da aggiornare\r\n * @param {Object} dati - Dati da aggiornare\r\n * @returns {Promise} Promise con i dati dell'ordine aggiornato\r\n */\nexport const updateOrdine = async (id, dati) => {\n  try {\n    const response = await axios.put(`${API_URL}/${id}`, dati);\n    return response.data;\n  } catch (error) {\n    console.error(`Errore nell'aggiornamento dell'ordine ${id}:`, error);\n    throw error;\n  }\n};\n\n/**\r\n * Elimina un ordine\r\n * @param {string} id - ID dell'ordine da eliminare\r\n * @returns {Promise} Promise con conferma di eliminazione\r\n */\nexport const deleteOrdine = async id => {\n  try {\n    const response = await axios.delete(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Errore nell'eliminazione dell'ordine ${id}:`, error);\n    throw error;\n  }\n};\n\n/**\r\n * Recupera le fasce orarie disponibili per una data\r\n * @param {string} data - Data per cui recuperare le fasce orarie\r\n * @returns {Promise} Promise con i dati delle fasce orarie\r\n */\nexport const getFasceOrarie = async data => {\n  try {\n    const response = await axios.get(`${API_URL}/fasceorarie/disponibili?data=${data}`);\n    return response.data.data;\n  } catch (error) {\n    console.error('Errore nel recupero delle fasce orarie:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Configura le fasce orarie per un giorno\r\n * @param {Object} config - Configurazione fasce orarie\r\n * @returns {Promise} Promise con i dati della configurazione\r\n */\nexport const configureFasceOrarie = async config => {\n  try {\n    const response = await axios.post(`${API_URL}/fasceorarie/configura`, config);\n    return response.data;\n  } catch (error) {\n    console.error('Errore nella configurazione delle fasce orarie:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Recupera statistiche sugli ordini\r\n * @param {Object} params - Parametri per le statistiche (dataInizio, dataFine)\r\n * @returns {Promise} Promise con i dati delle statistiche\r\n */\nexport const getStatisticheOrdini = async (params = {}) => {\n  try {\n    const queryParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (value) queryParams.append(key, value);\n    });\n    const url = `${API_URL}/statistiche/dashboard${queryParams.toString() ? '?' + queryParams.toString() : ''}`;\n    const response = await axios.get(url);\n    return response.data.data;\n  } catch (error) {\n    console.error('Errore nel recupero delle statistiche ordini:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","getOrdini","filtri","params","URLSearchParams","Object","entries","forEach","key","value","append","url","toString","response","get","data","error","console","getOrdine","id","createOrdine","ordine","post","updateOrdine","dati","put","deleteOrdine","delete","getFasceOrarie","configureFasceOrarie","config","getStatisticheOrdini","queryParams"],"sources":["C:/Users/demis/Desktop/gest8/client/src/services/ordiniService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api/ordini';\r\n\r\n/**\r\n * Recupera tutti gli ordini con filtri opzionali\r\n * @param {Object} filtri - Filtri opzionali (stato, tipoOrdine, data, cliente)\r\n * @returns {Promise} Promise con i dati degli ordini\r\n */\r\nexport const getOrdini = async (filtri = {}) => {\r\n  try {\r\n    const params = new URLSearchParams();\r\n    \r\n    // Aggiungi i filtri ai parametri\r\n    Object.entries(filtri).forEach(([key, value]) => {\r\n      if (value) params.append(key, value);\r\n    });\r\n    \r\n    const url = `${API_URL}${params.toString() ? '?' + params.toString() : ''}`;\r\n    const response = await axios.get(url);\r\n    \r\n    return response.data.data;\r\n  } catch (error) {\r\n    console.error('Errore nel recupero degli ordini:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Recupera un ordine specifico per ID\r\n * @param {string} id - ID dell'ordine\r\n * @returns {Promise} Promise con i dati dell'ordine\r\n */\r\nexport const getOrdine = async (id) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/${id}`);\r\n    return response.data.data;\r\n  } catch (error) {\r\n    console.error(`Errore nel recupero dell'ordine ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Crea un nuovo ordine\r\n * @param {Object} ordine - Dati del nuovo ordine\r\n * @returns {Promise} Promise con i dati del nuovo ordine creato\r\n */\r\nexport const createOrdine = async (ordine) => {\r\n  try {\r\n    const response = await axios.post(API_URL, ordine);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Errore nella creazione dell\\'ordine:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Aggiorna un ordine esistente\r\n * @param {string} id - ID dell'ordine da aggiornare\r\n * @param {Object} dati - Dati da aggiornare\r\n * @returns {Promise} Promise con i dati dell'ordine aggiornato\r\n */\r\nexport const updateOrdine = async (id, dati) => {\r\n  try {\r\n    const response = await axios.put(`${API_URL}/${id}`, dati);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Errore nell'aggiornamento dell'ordine ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Elimina un ordine\r\n * @param {string} id - ID dell'ordine da eliminare\r\n * @returns {Promise} Promise con conferma di eliminazione\r\n */\r\nexport const deleteOrdine = async (id) => {\r\n  try {\r\n    const response = await axios.delete(`${API_URL}/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Errore nell'eliminazione dell'ordine ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Recupera le fasce orarie disponibili per una data\r\n * @param {string} data - Data per cui recuperare le fasce orarie\r\n * @returns {Promise} Promise con i dati delle fasce orarie\r\n */\r\nexport const getFasceOrarie = async (data) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/fasceorarie/disponibili?data=${data}`);\r\n    return response.data.data;\r\n  } catch (error) {\r\n    console.error('Errore nel recupero delle fasce orarie:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Configura le fasce orarie per un giorno\r\n * @param {Object} config - Configurazione fasce orarie\r\n * @returns {Promise} Promise con i dati della configurazione\r\n */\r\nexport const configureFasceOrarie = async (config) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/fasceorarie/configura`, config);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Errore nella configurazione delle fasce orarie:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Recupera statistiche sugli ordini\r\n * @param {Object} params - Parametri per le statistiche (dataInizio, dataFine)\r\n * @returns {Promise} Promise con i dati delle statistiche\r\n */\r\nexport const getStatisticheOrdini = async (params = {}) => {\r\n  try {\r\n    const queryParams = new URLSearchParams();\r\n    \r\n    Object.entries(params).forEach(([key, value]) => {\r\n      if (value) queryParams.append(key, value);\r\n    });\r\n    \r\n    const url = `${API_URL}/statistiche/dashboard${queryParams.toString() ? '?' + queryParams.toString() : ''}`;\r\n    const response = await axios.get(url);\r\n    \r\n    return response.data.data;\r\n  } catch (error) {\r\n    console.error('Errore nel recupero delle statistiche ordini:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}